vars (get or set)
calculations
checks
loops
random-ranges
random-choises


vars:
	i0 i1 i2 - loop iterator, can get only in loop (in future i0 i1 i2 may be replaced on user-named iterators != "n")
	n - number of checks (set by player or by setter)
	n=123 - sets number of checks, can be only one and be first in code (maybe should require "n=" always, use n=n if you don't change it) 

calculation:
	(operand1 operation1 operand2 operation2 operand3 ...)
calculations: (2 + 3), (5 + 6 * 8), (32 - 1 / 0)

check:
	world
	.x.y	?
checks (- means random): -, 0, 0.-.- (=prev), 0.0.-, 0.-.0, 0.0.0

loop:
	numof repeats	(?)
	(check1 check2 check3 ...)
loops: 2(0.0.0) -> 0.0.0 0.0.0, (1 * 2)(0.0.0 0.0.1) -> 0.0.0 0.0.1 0.0.0 0.0.1

random-range:
	start	(?)
	-
	finish	(?)
randranges (both included): 0-1, 2-(5 + 3) -> 2-8

random-choise:
	// elem = check | num(;chance ?)
	[elem1 elem2 ...]
randchoises: [2 3 4] -> [2;33 3;33 4;33], [2;40, 3;30, 4, 5] -> [2;40 3;30 4;15 5;15]